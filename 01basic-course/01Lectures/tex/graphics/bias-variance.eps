%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 810.000000 429.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.6 (Build 18G1012) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 810 429
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 810 429
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Helvetica-Bold
%!FontType1-1.0: Helvetica-Bold 1.0000.1.0000
14 dict begin/FontName /Helvetica-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /m put
dup 34 /o put
dup 35 /d put
dup 36 /e put
dup 37 /l put
dup 38 /space put
dup 39 /c put
dup 40 /p put
dup 41 /x put
dup 42 /i put
dup 43 /t put
dup 44 /y put
dup 45 /slash put
dup 46 /r put
dup 47 /n put
dup 48 /u put
dup 49 /b put
dup 50 /s put
dup 51 /parenleft put
dup 52 /v put
dup 53 /a put
dup 54 /parenright put
dup 55 /g put
dup 56 /asciicircum put
dup 57 /two put
dup 58 /h put
dup 59 /w put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -2084 1 index div -985 2 index div 2942 3 index div 2374 5 -1 roll div]cvx def
/sfnts [<


1BB04044591B21212045B0C05058B0C0441B2159592DB800302C2020456944B001602020457D691844B001602DB800312CB800302A2DB800322C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800332C4B535845441B2121592DB800342C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800352C2020456944B001602DB800362CB800352A212DB800372C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800382C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800392C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8003A2C2020456944B001602020457D691844B001602DB8003B2CB8003A2A2DB8003C2C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8003D2C4B535845441B2121592DB8003E2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8003F2C2020456944B001602DB800402CB8003F2A212DB800412C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800422C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800432C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800442C2020456944B001602020457D691844B001602DB800452CB800442A2DB800462C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800472C4B535845441B2121592DB800482C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800492C2020456944B001602DB8004A2CB800492A212DB8004B2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8004C2C2046B00425465258238A59



61804B8DA44229321B3061649F010C012E011B012E00000000030042FE42045E045F000D002F0030005A40108A1E0111120524302F071206250D2429B8013F40201C202C180F30021F121F2527302C131A321C841B2D09362C19313298214845182B2B4EF44DEDF4ED4E10F64D1139FDF4E42F003FFDCD3FED393F3F3CED11393130015D2436353426232207061514171633121716173521111407062122242721161716333237363D01060706232202353412333702BD8A836E96391E203A960B3D68400115477AFEA6D1FEF80E01360C1B2E6D9A3422292F5588D2FBF2DE5BEA97A59BA28D4B6E5F4A8A0372192B739DFBF6D36BB8A4A332162767429C464623410127FCF3014B03000000000100870000045E05BD0017003F402505022702580E680E04141712000C24170710070A0836051A1913102711191819BE215045182B2B4EF44DFD3C4E10F64DED003F3C3FED3F11393130015D0016171E01151121113427262322061511211121113E01330343A5352D14FEDD1E276D7175FEE4011C3EA35A045E46483D8192FD80029758364C978CFDB205BDFDF75F4B00000000020089000001AA05CB00030007003B40224C004C015C005C010401B102000406070A0917171A0006270107190809B2215045182B2B4EF43C4DFD3C4E456544E6003F3F3F4DED3130005D012111210121112101AAFEDF0121FEDF0121FEDF04C40107FE77FBBE000001008B000001A805C20003002540130200010A0517171A002701190405B2215045182B2B4EF44DFD4E456544E6003F3F31302901112101A8FEE3011D05C200000100800000069C045A002D00C2414D0037000200010006000200160002002500020069000F006A001A0079000F007A001A0089000F008A001A0099000F0099001A00A9001A00B9001A00E7000B000E0002002100290003001F000D0024002D00180024002D00250007001F0006001D00120008000A002F00170017001A000600360009010F00290011004D0014010F001E0020001D0027001E0019002E002F012300210050004500182B2B4EF44DFDC410F4ED39F4FD4E456544E6003F3C3C3F3F3C4DED10ED1117393130015D005D00161716171615032111342726232207061511211134272623220706151121112115363736333217161736373633058F8C392E100A02FEDC142666762D17FEE11424697A2A17FEDF0115352F53847D4D3E203853586C045A38463953376AFD5102B63E284C623449FD770289612C4F4F2D59FD7004409F552440373350602D2D0002008700000461045F00160017004B402D0501150125013701580B680B060112100609241716070E040A170536170F021A19110E270F191819BE215045182B2B4EF44DFDC44E10F64D1139ED2F003F3C3F3CED3F39393130015D00161511211134272623220706




00>] def
/CharStrings 29 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/slash 4 def
/two 5 def
/asciicircum 6 def
/a 7 def
/b 8 def
/c 9 def
/d 10 def
/e 11 def
/g 12 def
/h 13 def
/i 14 def
/l 15 def
/m 16 def
/n 17 def
/o 18 def
/p 19 def
/r 20 def
/s 21 def
/t 22 def
/u 23 def
/v 24 def
/w 25 def
/x 26 def
/y 27 def
/u20B8 28 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-2084 -985 2942 2374}def
/UniqueID 4037662 def
currentdict currentfile eexec

7CF382B2351E76647B4774208EBF8EFA9BADEE24A9AF315271999E05027845C44E2C00B87A276A1FCD009F6A9099A1A9C35CF39002709AC37D8E6D0658A83FBCE5135A0CF37D1D387D81CD803E31F9106582130C04C468BFC6762291B9E5FB28205466B91DE8A307B58F4B2D387EC81166B339A1494E15056569F4A76C8EDA982B53F2E1B954BF7E4219A20973247FCB460DEB4A5EBCD22D4D1342B1B22047F2565633B1347EF5260A1E57C2F95D58C0F78A9CB35575D1F290FDED3902BDA6D4CC38F96CFAA9F766369C1D909E294FFA133816BC9D6B74447F81714485BFDDA786C34C8021FE19F47CAD343F98EF42324F7547E6CE9398E41CD625E9EB07C552C69B6A9817066EA549401CC18C63DCC9D835287ABB2845193ADE973CBEDF12ED0B577B08D6E691EA7DD09F99F1D6AF3CAA79D0D7E70135BC9F625E41EB00B08854F2DC7A1B4945EC58F7A1EB08F5CA03455E7ED7EC65F6347DE00FE820A09C7C287281B4BBE9D755202FC736A4522FD7A7AA01312D99F302CC3F23434BBD0E943B9382A085CA80AD7374A253FCD23C1A6C10BE8FC7BD4DA01A9ACC070D5E9C00F5BA20ECF47C9B77C1113D79A9C5538CE648F92B0E374B6CA6496E4A66F4DD66424532F6BBC019E45A67CAFC35D67416AE3E30A594326D6CACC932E5E426393CBC60C0EC86F8E5E1E329F79A22BA80255A4EA2D519AC3537B05ADC2BFF3C99E870438649AFE333E89D64A76815F672AEF39A6D4B73135B0A3C623F81CC5B2CCB21ACD0E272AC593781AE064B27B0D6B29EBFB04635D453DF39ABEFE4D91E0AFC2EA1257A8612B4B1E0AB67CC640F06ACDEBCE5C7450BCEC129CBC24A15F435813A6DD39C7B660578D615770FDAFE6A0EDBADC7D0020B28E4DAAC87F22C917DAD33560495F77F1EE5475E199B76227F550CBA774A3CBCA16944763F6A6441AE8B1E767621A8CEB216E6CE15B8BC176886EC84F8743043B54CD20C20C8847ADAC6602AF5AAC3EA19561C87EE167754B6ABF1BDF162AD4DF209986937988FF4D7F52FE9A75F3324D03527B57D40B419AD69C67E9571C4632390CF738B9A09A0F199962C5A941B1BA03E28C439BDC045E95033BEE0FDEE6C25DFA13B3A41E4F50B3A63045BD51CA7EB7B9AB23DF10C3CBF1091ABA370930D1A1149B7FB026222430974E91775C214D41383B41EB0CD10E4F696362B7A02C804878D9F4B3C82A34A0AFD7FB4EF56B544FE22A6484981FE183301876CBE19782B836EA2BC07FD02B1BD51FA8C10BE0FDD6D1815312E60AD17BDE1F4C9714AE7F7C02A9842E1D7FB775B0339CBEC2CE8B0830AD4233F5C2A229D52A2F11B20D8091F4C6A7CBA30077F63036AACF2FD7A78498A11E4C610FD6559D171D34C429BD1BD42735EEF833D536A24EEC2C3C1792E7DFE86E729D50BB27A85357D40F540C369EC89C582571F3E3D


7895889B29C67C1CB574BB04C8CF675EDBA203D83E274C0E9B4604B9EC11FF6C113D57AAD94719F66CDF80AEAF511E526C900D30DD5955071A959FC28DF8054C0264CFD52A72CEA3B284548958332241381FDE7227B69B80BE65D8127494D995CF006906D8AB853FA9F59FFB815C6CA629EC7BC32426548C5DCCE45BF367605AE468A7D74B8BBA945DDA5A3A37668E4BEF4FB0B8327AFA28DE36365745D3769650599DF3DA40D36BF57F499F68D9D5E2ADABC9942FA33216BE0B12709EB2A4F914BCF8389C28BB77
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Helvetica-Bold cguidfix
/F1.1/Helvetica-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
0 0 810 429 rc
-205 658 m
997 658 l
997 -333 l
-205 -333 l
h
-205 658 m
f
1 J
1 j
0 0 0 sc
1 0 0 -1 -205 658 cm
334 632 m
333.7905 244.56406 l
S
CM
128.78618 421.43594 m
125.79051 413.43433 l
131.79051 413.43756 l
h
128.78618 421.43594 m
f
0 J
0 j
1 0 0 -1 -205 658 cm
333.78619 236.56406 m
330.7905 244.56569 l
336.7905 244.56244 l
h
333.78619 236.56406 m
S
1 J
1 j
297 610.5 m
901.88123 610.5 l
S
CM
704.88123 48 m
696.88123 51 l
696.88123 45 l
h
704.88123 48 m
f
0 J
0 j
1 0 0 -1 -205 658 cm
909.88123 610 m
901.88123 607 l
901.88123 613 l
h
909.88123 610 m
S
1 J
1 j
[
4
4
] 0 d
333.95349 546 m
906 544 l
S
3 w
[] 0 d
0.129412 0.50196099 0.25490201 sc
356.03516 293.5 m
367.03516 575.5 761.03516 580.5 784.03516 581.5 c
807.03516 582.5 902.03516 584.5 902.03516 584.5 c
S
0.60000002 0.152941 0.152941 sc
378 296.66666 m
449.33334 469.33334 491.66666 503 656.66669 502 c
821.66669 501 857.14972 270 857.14972 270 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 629.25 12 cm
/F1.1[ 12 0 0 -12 0 0]sf
-67.68457 4 m
(!"#$%&'"!\(%$\)*+,-".#$.)[ 10.669922 7.330078 7.330078 6.673828 3.333984 3.333984 6.673828 7.330078 10.669922 7.330078 3.333984 6.673828 6.673828 3.333984 3.996094 6.673828 3.333984 7.330078 4.669922 7.330078 6.673828 0.000000 ] xS
1 0 0 -1 64.410156 409 cm
-29.000977 -3 m
(\(.$#*'+*"/)[ 7.330078 4.669922 6.673828 7.330078 3.333984 6.673828 3.996094 3.333984 7.330078 0.000000 ] xS
-14.006836 11 m
($..".)[ 6.673828 4.669922 4.669922 7.330078 0.000000 ] xS
1 0 0 -1 64.410156 112 cm
-46.350586 4 m
(*..$#0'*1%$&$..".)[ 3.333984 4.669922 4.669922 6.673828 7.330078 7.330078 6.673828 3.333984 7.330078 3.333984 6.673828 3.333984 6.673828 4.669922 4.669922 7.330078 0.000000 ] xS
/Cs1 SC
0.11372549 0.35294119 0.67058825 sc
1 0 0 -1 747.875 351 cm
-21.008789 -3 m
(+$2+&2$+)[ 3.996094 6.673828 6.673828 3.996094 3.333984 6.673828 6.673828 0.000000 ] xS
-44.021484 11 m
($..".&345.*5/'$6)[ 6.673828 4.669922 4.669922 7.330078 4.669922 3.333984 3.996094 6.673828 6.673828 4.669922 3.333984 6.673828 7.330078 6.673828 6.673828 0.000000 ] xS
0.12941 0.50195998 0.25490001 sc
1 0 0 -1 747.875 65 cm
-32.337891 -3 m
(+.5*/*/7&2$+)[ 3.996094 4.669922 6.673828 3.333984 7.330078 3.333984 7.330078 7.330078 3.333984 6.673828 6.673828 0.000000 ] xS
-38.516602 11 m
($..".&31*52896)[ 6.673828 4.669922 4.669922 7.330078 4.669922 3.333984 3.996094 7.330078 3.333984 6.673828 6.673828 7.007812 6.673828 0.000000 ] xS
1 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -205 658 cm
356.75 232.5 m
429.375 232.5 l
437.96552 232 444.9375 240.51199 444.9375 251 c
444.9375 261.48801 437.96552 270 429.375 270.5 c
356.75 270.5 l
348.15948 270 341.1875 261.48801 341.1875 251 c
341.1875 240.51199 348.15948 232 356.75 232 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 188.0625 407 cm
-26.334961 -3 m
(:*7:&1*52)[ 7.330078 3.333984 7.330078 7.330078 3.333984 7.330078 3.333984 6.673828 0.000000 ] xS
-36.017578 11 m
(%";&45.*5/'$)[ 3.333984 7.330078 9.333984 3.333984 6.673828 6.673828 4.669922 3.333984 6.673828 7.330078 6.673828 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -205 658 cm
887.5 234.5 m
964.5 234.5 l
973.60797 234.66406 981 243.17606 981 253.66406 c
981 264.15207 973.60797 272.66406 964.5 272.5 c
887.5 272.5 l
878.39203 272.66406 871 264.15207 871 253.66406 c
871 243.17606 878.39203 234.66406 887.5 234.66406 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 721 404.33594 cm
-23.671875 -3 m
(%";&1*52)[ 3.333984 7.330078 9.333984 3.333984 7.330078 3.333984 6.673828 0.000000 ] xS
-38.680664 11 m
(:*7:&45.*5/'$)[ 7.330078 3.333984 7.330078 7.330078 3.333984 6.673828 6.673828 4.669922 3.333984 6.673828 7.330078 6.673828 0.000000 ] xS
3 w
0.60000002 i
/Cs1 SC
0.11372549 0.35294119 0.67058825 sc
1 0 0 -1 -205 658 cm
365.55209 581.75 m
570.88544 600.41669 650.55206 581.58331 735.55206 526.25 c
820.55206 470.91666 902.03516 296.25 902.03516 296.25 c
S
1 w
[
4
4
] 0 d
0 0 0 sc
668.40887 610 m
669 501 666.68005 501.65067 666.68005 501.65067 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 468.375 30 cm
-38.337891 4 m
("\(+*!5%&".#$.)[ 7.330078 7.330078 3.996094 3.333984 10.669922 6.673828 3.333984 3.333984 7.330078 4.669922 7.330078 6.673828 0.000000 ] xS
/Cs1 SC
0.60000002 0.15294118 0.15294118 sc
1 0 0 -1 608.375 351 cm
-12.665039 -3 m
(+"+5%)[ 3.996094 7.330078 3.996094 6.673828 0.000000 ] xS
-14.006836 11 m
($..".)[ 6.673828 4.669922 4.669922 7.330078 0.000000 ] xS
ep
end
%%Trailer
%%EOF
